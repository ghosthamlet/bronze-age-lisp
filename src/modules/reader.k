($define-ground-lambda! read r
  (read-aux
    ($if (null? r)
      ($sequence
        (flush-output-port stdout)
        (flush-output-port stderr)
        stdin)
      (car r))))

($bind-private! special-tokens
  ($quote*
    ("ignore" . #ignore)
    ("inert" . #inert)
    ("t" . #t)
    ("f" . #f)))

($bind-private! character-names
  ($quote*
    ("null" . #\x0000)
    ("tab" . #\x0009)
    ("newline" . #\x000A)
    ("space" . #\x0020)))

($bind-private! extended-identifier-characters
  ($quote*
    #\! #\$ #\% #\& #\* #\+ #\- #\. #\/ #\:
    #\< #\= #\> #\? #\@ #\^ #\_ #\~))

($defun-privates!
  (read-aux (p)
    ($let1 c (peek-char p)
      ($cond
        ((eof-object? c)
          c)
        ((eq? c #\;)
          (skip-line p)
          (read-aux p))
        ((char-whitespace? c)
          (read-char p)
          (read-aux p))
        ((char<=? #\0 c #\9)
          (read-number p 10))
        ((eq? c #\()
          (read-char p)
          (read-list-tail p ()))
        ((eq? c #\")
          (read-char p)
          (get-output-string
            (read-string-tail p (open-output-string))))
        ((eq? c #\#)
          (read-char p)
          (read-special p))
        ((eq? c #\|)
          (read-char p)
          (string->symbol
            (get-output-string
              (read-barsymbol-tail p (open-output-string)))))
        (($or? (eq? c #\+) (eq? c #\-))
          (read-char p)
          (read-number-or-symbol c p))
        (($or? (char-alphabetic? c) (memq? c extended-identifier-characters))
          (string->symbol
            (get-output-string
              (read-symbol-tail p (open-output-string)))))
        (#t
          (read-char p)
          (error "invalid character on input" c)))))
  (read-special (p)
    ($let1 c (peek-char p)
      ($cond
        ((eq? c #\\) (read-char p) (read-character-literal p))
        ((eq? c #\:) (error "read: keywords not implemented"))
        (#t
          ($let1 s (get-output-string (read-symbol-tail p (open-output-string)))
            ($let1 x (assoc s special-tokens)
              ($if (null? x)
                (error "invalid special token" s)
                (cdr x))))))))
  (read-character-literal (p)
    ($let1 c (read-char p)
      ($cond
        (($and? (eq? c #\x) (char-digit? (peek-char p) 16))
          (integer->char (read-unsigned-number p 16)))
        (($and? (char-alphabetic? c) (char-alphabetic? (peek-char p)))
          ($let1 q (open-output-string)
            (write-char c q)
            ($let1 s (get-output-string (read-symbol-tail p q))
              ($let1 x (assoc s character-names)
                ($if (null? x)
                  (error "invalid character name" s)
                  (cdr x))))))
        (#t c))))
  (read-list-tail (p a)
    ($let1 c (peek-char p)
      ($cond
        ((eof-object? c)
          (error "expected )"))
        ((eq? c #\;)
          (skip-line p)
          (read-list-tail p a))
        ((char-whitespace? c)
          (read-char p)
          (read-list-tail p a))
        ((eq? c #\))
          (read-char p)
          (naive-reverse a ()))
        ((eq? c #\.)
          ($when (null? a)
            (error "missing first element of improper list"))
          (read-char p)
          ($let1 x (read-aux p)
            (eat-closing-parenthesis p)
            (naive-reverse a x)))
        (#t
          (read-list-tail p (cons (read-aux p) a))))))
  (skip-line (p)
    ($unless (eq? (read-char p) #\newline)
      (skip-line p)))
  (eat-closing-parenthesis (p)
    ($let1 c (read-char p)
      ($cond
        ((eq? c #\;)
          (skip-line p)
          (eat-closing-parenthesis p))
        ((char-whitespace? c)
          (eat-closing-parenthesis p))
        ((eq? c #\))
          #inert)
        (#t
          (error "expected ) after improper list")))))
  (naive-reverse (x a)
    ($if (pair? x)
      (naive-reverse (cdr x) (cons (car x) a))
      a))
  (read-string-tail (p q)
    ($let1 c (read-char p)
      ($cond
        ((eof-object? c)
          (error "unexpected EOF in quoted string"))
        ((eq? c #\")
          q)
        ((eq? c #\\)
          (write-char (read-string-char-escape p) q)
          (read-string-tail p q))
        (#t
          (write-char c q)
          (read-string-tail p q)))))
  (read-barsymbol-tail (p q)
    ($let1 c (read-char p)
      ($cond
        ((eof-object? c)
          (error "unexpected EOF in quoted symbol"))
        ((eq? c #\|)
          q)
        ((eq? c #\\)
          (write-char (read-string-char-escape p) q)
          (read-barsymbol-tail p q))
        (#t
          (write-char c q)
          (read-barsymbol-tail p q)))))
  (read-symbol-tail (p q)
    ($let1 c (peek-char p)
      ($cond
        ((eof-object? c) q)
        ((eq? c #\\)
          (read-char p)
          (write-char (read-string-char-escape p) q)
          (read-symbol-tail p q))
        (($or? (char-alphabetic? c)
               (char-digit? c)
               (memq? c extended-identifier-characters))
          (read-char p)
          (write-char c q)
          (read-symbol-tail p q))
        (#t q))))
  (read-string-char-escape (p)
    ($let1 c (read-char p)
      ($cond
        ((eq? c #\t) #\x0009)
        ((eq? c #\n) #\x000A)
        ((eq? c #\r) #\x000D)
        ((eq? c #\x)
          ($let1 n (read-unsigned-number p 16)
            ($let1 t (read-char p)
              ($unless (eq? t #\;)
                (error "escape sequence #\\x...; must end with a semicolon"))
              (integer->char n))))
        (#t c))))
  (read-number-or-symbol (c p)
    ($if (char<=? #\0 (peek-char p) #\9)
      ($let1 x (read-unsigned-number p 10)
        ($if (eq? c #\-) (- 0 x) x))
      (string->symbol
        (get-output-string
          (read-symbol-tail p
            ($let1 q (open-output-string)
              (write-char c q)
              q))))))
  (read-number (p b)
    ($let1 c (peek-char p)
      ($cond
        ((eof-object? c) (error "read-number EOF"))
        ((eq? c #\-) (read-char p) (- 0 (read-unsigned-number p b)))
        ((eq? c #\+) (read-char p) (read-unsigned-number p b))
        (#t (read-unsigned-number p b)))))
  (read-unsigned-number (p b)
    ($let1 c (read-char p)
      ($if (char-digit? c b)
        (read-number-tail p b (char->digit c b))
        (error "read-unsigned-number"))))
  (read-number-tail (p b a)
    ($let1 c (peek-char p)
      ($if ($and? (char? c) (char-digit? c b))
         ($sequence
           (read-char p)
           (read-number-tail p b (+ (char->digit c b) (* b a))))
          a)))
  (read-all (p a)
    ($let1 x (read p)
      ($if (eof-object? x)
        (naive-reverse a ())
        (read-all p (cons x a)))))
  (read-file (s)
    ($let1 p (open-input-file s)
      ($let1 v (read-all p ())
        (close-input-port p)
        v))))

($define-ground-lambda! string->number (s . r)
  ($let1 p (open-input-string s)
    ($let1 b ($if (null? r) 10 (car r))
      ($let1 n (read-number p b)
        ($if (eof-object? (read-char p))
          n
          (error "string->number" s b))))))

($define-ground-wrapvau! load (s) denv
  (eval (cons $sequence (read-file s)) denv))
